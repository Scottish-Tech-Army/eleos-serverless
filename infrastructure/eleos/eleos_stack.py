from aws_cdk import (
    Duration,
    RemovalPolicy,
    Stack,
    aws_ecs as ecs, 
    aws_ecs_patterns as ecs_patterns, 
    aws_ec2 as ec2,
    aws_rds as rds,
)
from constructs import Construct

class EleosStack(Stack):

    def __init__(self, scope: Construct, construct_id: str, **kwargs) -> None:
        super().__init__(scope, construct_id, **kwargs)

        # VPC
        vpc = ec2.Vpc(self, "Vpc", max_azs=3)     # default is all AZs in region

        # ecs cluster for odoo container
        cluster = ecs.Cluster(self, "Cluster", vpc=vpc)

        # Parameter group for database cluster
        parameter_group=rds.ParameterGroup.from_parameter_group_name(self, "ParameterGroup", 
                "default.aurora-postgresql10",
                )

        # Aurora serverless postgresql db
        dbcluster = rds.ServerlessCluster(self, "postgres",
            engine=rds.DatabaseClusterEngine.AURORA_POSTGRESQL,
            parameter_group=parameter_group, 
            vpc=vpc, 
            default_database_name="odoo",
            credentials=rds.Credentials.from_generated_secret("odoo"), # generate secret password for user 'odoo'
            scaling=rds.ServerlessScalingOptions(
                auto_pause=Duration.minutes(5),  # default is to pause after 5 minutes of idle time
                min_capacity=rds.AuroraCapacityUnit.ACU_2,  # default is 2 Aurora capacity units (ACUs)
                max_capacity=rds.AuroraCapacityUnit.ACU_4),
            removal_policy=RemovalPolicy.DESTROY      # dev
            )

        endpointaddress = dbcluster.cluster_endpoint.hostname # address of the dbcluster to pass to odoo

        dbpassword = ecs.Secret.from_secrets_manager(
            dbcluster.secret, field="password") # secret containing the password auto generated by ...from_generated_secret("odoo")

        # task image options for Fargate service references odoo docker hub image
        task_image_options=ecs_patterns.ApplicationLoadBalancedTaskImageOptions(
            image=ecs.ContainerImage.from_registry("odoo:latest"), 
            container_port=8069,
            secrets={"POSTGRES_PASSWORD":dbpassword},
            environment={"DB_PORT_5432_TCP_ADDR":endpointaddress}
            )
        
        '''
        # task image options for Fargate service references local odoo Dockerfile & conf
        task_image_options=ecs_patterns.ApplicationLoadBalancedTaskImageOptions(
            image=ecs.ContainerImage.from_asset(directory="./odoo", 
            build_args={"BUILD_ARGS": "--no-cache",
                }),
           secrets={"POSTGRES_PASSWORD":dbpassword},
           environment={"DB_PORT_5432_TCP_ADDR":endpointaddress,
                        },
           container_port=8069 
                )
        '''

        # Fargate Service for odoo docker image with auto load balancer
        application = ecs_patterns.ApplicationLoadBalancedFargateService(self, 
            "odooFargateService",
            cluster=cluster,            # Required
            cpu=512,                    # Default is 256
            desired_count=2,            # Default is 1
            memory_limit_mib=1024,      # Default is 512
            public_load_balancer=True,  # Default is False
            assign_public_ip=True,
            task_image_options=task_image_options,
            )

        dbport = dbcluster.connections.default_port
        dbcluster.connections.allow_default_port_from(application.service)
        #dbcluster.connections.allow_default_port_from_any_ipv4

        application.cluster.connections.allow_to(dbcluster, port_range=dbport) #?? not sure if needed

        '''
        # EFS for "What Odoo stores on the file system are the application's static assets, such as JavaScrip and CSS files, and session context files."
        file_system = efs.FileSystem(self, "odooEfsFileSystem",
            vpc=vpc,
            lifecycle_policy=efs.LifecyclePolicy.AFTER_14_DAYS,  # files are not transitioned to infrequent access (IA) storage by default
            performance_mode=efs.PerformanceMode.GENERAL_PURPOSE,  # default
            out_of_infrequent_access_policy=efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS,
            removal_policy=RemovalPolicy.DESTROY # dev

        file_system.connections.allow_default_port_from(application.service, "Allow access to the file system")
        #file_system.connections.allow_default_port_to(application.service)
        '''