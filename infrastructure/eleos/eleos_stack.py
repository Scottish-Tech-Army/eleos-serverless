from aws_cdk import (
    Duration,
    RemovalPolicy,
    Stack,
    aws_ecs as ecs,
    aws_ecs_patterns as ecs_patterns,
    aws_ec2 as ec2,
    aws_rds as rds,
    aws_efs as efs,
    aws_iam as iam,
    aws_lambda as lambda_,
    aws_s3 as s3,
    aws_lambda_event_sources as event_sources,
    aws_wafv2 as waf,
)
from constructs import Construct


class EleosStack(Stack):
    def __init__(
        self,
        scope: Construct,
        construct_id: str,
        odoo_version: str,
        environ: str,
        **kwargs,
    ) -> None:
        super().__init__(scope, construct_id, **kwargs)

        ## Nat Instance
        # Create a new NAT instance
        # https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/NatProvider.html#aws_cdk.aws_ec2.NatProvider.instance
        nat_gateway_provider = ec2.NatProvider.instance(
            instance_type=ec2.InstanceType("t3.nano")
        )

        ## VPC
        # https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/Vpc.html
        vpc = ec2.Vpc(
            self,
            "Vpc",
            max_azs=2,  # default is all AZs in region = 3
            nat_gateways=1,  # default is one in each zone.
            nat_gateway_provider=nat_gateway_provider,
        )

        ## RDS DATABASE - postgres - Odoo only works with postgres
        # https://aws.amazon.com/rds/instance-types/
        # https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_rds/DatabaseInstance.html
        data_base = rds.DatabaseInstance(
            self,
            "postgres",
            vpc=vpc,
            engine=rds.DatabaseInstanceEngine.POSTGRES,
            instance_type=ec2.InstanceType(
                "t4g.micro"
            ),  # https://aws.amazon.com/rds/mysql/pricing/?pg=pr&loc=2
            allocated_storage=5,
            max_allocated_storage=20,  # GiB
            database_name="postgres",
            credentials=rds.Credentials.from_generated_secret(
                "odoo", exclude_characters="(\" %+~`#$&*()|[]}{:;<>?!'/^-,@_=\\"
            ),  # generate secret password for 'odoo' user
            cloudwatch_logs_exports=["postgresql"],
            removal_policy=RemovalPolicy.DESTROY,  # dev
        )

        endpointaddress = data_base.db_instance_endpoint_address
        dbpassword = ecs.Secret.from_secrets_manager(
            data_base.secret, field="password"
        )  # secret containing the password auto generated by ...from_generated_secret("odoo")

        ## Create EFS storage for "What Odoo stores on the file system are the application's static assets,
        # such as JavaScript and CSS files, and session context files."
        # https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_efs/FileSystem.html
        file_system = efs.FileSystem(
            self,
            "odooEfsFileSystem",
            vpc=vpc,
            lifecycle_policy=efs.LifecyclePolicy.AFTER_14_DAYS,  # files are not transitioned to infrequent access (IA) storage by default
            performance_mode=efs.PerformanceMode.GENERAL_PURPOSE,  # default
            out_of_infrequent_access_policy=efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS,
            removal_policy=RemovalPolicy.DESTROY,  # dev
        )

        ## EFS access point
        # https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_efs/AccessPoint.html
        access_point = efs.AccessPoint(
            self,
            "odooEfsAccessPoint",
            file_system=file_system,
            path="/",
            create_acl=efs.Acl(owner_uid="0", owner_gid="0", permissions="755"),
            posix_user=efs.PosixUser(uid="0", gid="0"),
        )

        ## ECS cluster for odoo containers
        # https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ecs/Cluster.html
        cluster = ecs.Cluster(self, "Cluster", vpc=vpc)

        ## Task image options for Fargate service references Odoo docker hub image
        # https://hub.docker.com/_/odoo
        # https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ecs_patterns/ApplicationLoadBalancedTaskImageOptions.html
        task_image_options = ecs_patterns.ApplicationLoadBalancedTaskImageOptions(
            image=ecs.ContainerImage.from_registry(odoo_version),
            container_name="odooContainer",
            container_port=8069,
            secrets={"POSTGRES_PASSWORD": dbpassword},
            environment={"DB_PORT_5432_TCP_ADDR": endpointaddress},
        )

        ## Fargate service running on an ECS cluster fronted by an application load balancer.
        ## If performance is poor, consider increasing desired count, CPU and memory limit.
        # https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ecs_patterns/ApplicationLoadBalancedFargateService.html
        application = ecs_patterns.ApplicationLoadBalancedFargateService(
            self,
            "odooFargateService",
            cluster=cluster,  # Required
            cpu=512,  # Default is 256
            desired_count=1,  # Default is 1 suggested is 2
            min_healthy_percent=50,  # Default is 50% of desired count
            memory_limit_mib=1024,  # Default is 512
            public_load_balancer=True,  # Default is True
            assign_public_ip=False,
            task_image_options=task_image_options,
            health_check_grace_period=Duration.seconds(300),  # Default is 60
            idle_timeout=Duration.seconds(60),  # default is 60
            platform_version=ecs.FargatePlatformVersion.VERSION1_4,  # must specify > VERSION1_4 for efs to mount
        )

        # Configure Health Checks on cluster.
        application.target_group.configure_health_check(
            healthy_threshold_count=2,  # 5 is the default
            interval=Duration.seconds(60),  # 300 is the max!
            timeout=Duration.seconds(30),  # 120 is the max!
            unhealthy_threshold_count=5,
            path="/web/database/selector",
        )

        # Create an EFS volume
        volume_name = "odooVolume"
        application.task_definition.add_volume(
            name=volume_name,
            efs_volume_configuration=ecs.EfsVolumeConfiguration(
                file_system_id=file_system.file_system_id,
                authorization_config=ecs.AuthorizationConfig(
                    access_point_id=access_point.access_point_id, iam="ENABLED"
                ),
                transit_encryption="ENABLED",  # enable encryption for EFS data in transit
            ),
        )

        # Add mount point for Odoo's data dir
        application.task_definition.default_container.add_mount_points(
            ecs.MountPoint(
                container_path="/var/lib/odoo",
                read_only=False,
                source_volume=volume_name,  # must match name string in add_volume
            )
        )

        # Grant cluster access to file system
        application.task_definition.add_to_task_role_policy(
            iam.PolicyStatement(
                actions=[
                    "elasticfilesystem:ClientWrite",
                    "elasticfilesystem:ClientRead",
                ],
                resources=[file_system.file_system_arn],
            )
        )

        ## Connections - allows traffic between the default, automatically created security groups
        dbport = data_base.connections.default_port
        efsport = file_system.connections.default_port
        # database
        data_base.connections.allow_default_port_from(application.service)
        # Odoo cluster
        application.service.connections.allow_from(data_base, port_range=dbport)
        application.service.connections.allow_from(file_system, port_range=efsport)
        # EFS file system
        file_system.connections.allow_default_port_from(application.service)

        #############################################################################################
        ##                   Code to install custom addons below.                                  ##
        #############################################################################################
        ## Add mount point for Odoo's custom modules dir - path from containers odoo.conf
        application.task_definition.default_container.add_mount_points(
            ecs.MountPoint(
                container_path="/mnt/extra-addons",
                read_only=False,
                source_volume=volume_name,  # must match name string in add_volume
            )
        )

        ## Create s3 to upload addon .zip file to
        addon_bucket = s3.Bucket(
            self,
            "AddonBucket",
            bucket_name=f'addon-bucket-{odoo_version.replace(":","")}-{environ}',  # does not allow ':' in name
            auto_delete_objects=True,
            removal_policy=RemovalPolicy.DESTROY,
        )

        ## Lambda to copy .zip from S3 to addons mount point and unzip
        addon_lambda = lambda_.Function(
            self,
            "s3toEFSlambda",
            vpc=vpc,
            filesystem=lambda_.FileSystem.from_efs_access_point(
                access_point, "/mnt/extra-addons"
            ),
            runtime=lambda_.Runtime.PYTHON_3_8,
            code=lambda_.Code.from_asset("addon_lambda"),
            handler="addon_lambda.lambda_handler",
        )

        ## Event triggered when .zip file added to bucket
        upload_trigger = event_sources.S3EventSource(
            addon_bucket, events=[s3.EventType.OBJECT_CREATED]
        )
        ## lock event to lambda
        addon_lambda.add_event_source(upload_trigger)

        ## Grant permissions for lamda to access s3 and EFS
        addon_bucket.grant_read_write(addon_lambda)
        addon_lambda.add_to_role_policy(
            iam.PolicyStatement(
                actions=[
                    "elasticfilesystem:ClientWrite",
                    "elasticfilesystem:ClientRead",
                ],
                resources=[file_system.file_system_arn],
            )
        )

        ####################
        #####    WAF    ####
        ####################

        waf_rules = list()

        """ 0. PHP Rule Set"""
        """ Contains rules that block request patterns associated with exploiting vulnerabilities specific to the use of PHP,
        including injection of unsafe PHP functions. This can help prevent exploits that allow an attacker to remotely execute code or commands """
        aws_php_rule = waf.CfnWebACL.RuleProperty(
            name="WafPHPRule",
            priority=0,
            override_action=waf.CfnWebACL.OverrideActionProperty(count={}),
            statement=waf.CfnWebACL.StatementProperty(
                managed_rule_group_statement=waf.CfnWebACL.ManagedRuleGroupStatementProperty(
                    name="AWSManagedRulesPHPRuleSet",
                    vendor_name="AWS",
                    excluded_rules=[],
                )
            ),
            visibility_config=waf.CfnWebACL.VisibilityConfigProperty(
                cloud_watch_metrics_enabled=True,
                metric_name="aws_php",
                sampled_requests_enabled=True,
            ),
        )
        waf_rules.append(aws_php_rule)

        """ 1. AWS Common Rule Set """
        """ Contains rules that are generally applicable to web applications.
        This provides protection against exploitation of a wide range of vulnerabilities,
        including those described in OWASP publications. """
        aws_common_rule = waf.CfnWebACL.RuleProperty(
            name="WafCommonRule",
            priority=1,
            override_action=waf.CfnWebACL.OverrideActionProperty(count={}),
            statement=waf.CfnWebACL.StatementProperty(
                managed_rule_group_statement=waf.CfnWebACL.ManagedRuleGroupStatementProperty(
                    name="AWSManagedRulesCommonRuleSet",
                    vendor_name="AWS",
                    excluded_rules=[],
                )
            ),
            visibility_config=waf.CfnWebACL.VisibilityConfigProperty(
                cloud_watch_metrics_enabled=True,
                metric_name="aws_common",
                sampled_requests_enabled=True,
            ),
        )
        waf_rules.append(aws_common_rule)

        """ 2. SQL Injection """
        """ Contains rules that allow you to block request patterns associated with exploitation of SQL databases,
        like SQL injection attacks. This can help prevent remote injection of unauthorized queries """
        aws_sqli_rule = waf.CfnWebACL.RuleProperty(
            name="WafSQLiRule",
            priority=2,
            override_action=waf.CfnWebACL.OverrideActionProperty(count={}),
            statement=waf.CfnWebACL.StatementProperty(
                managed_rule_group_statement=waf.CfnWebACL.ManagedRuleGroupStatementProperty(
                    name="AWSManagedRulesSQLiRuleSet",
                    vendor_name="AWS",
                    excluded_rules=[],
                )
            ),
            visibility_config=waf.CfnWebACL.VisibilityConfigProperty(
                cloud_watch_metrics_enabled=True,
                metric_name="aws_sqli",
                sampled_requests_enabled=True,
            ),
        )
        waf_rules.append(aws_sqli_rule)

        """ 3. Linux Rule """
        """ Contains rules that block request patterns associated with exploitation of vulnerabilities specific to Linux, including LFI attacks.
        This can help prevent attacks that expose file contents or execute code for which the attacker should not have had access """
        aws_linux_rule = waf.CfnWebACL.RuleProperty(
            name="WafLinuxRule",
            priority=3,
            override_action=waf.CfnWebACL.OverrideActionProperty(count={}),
            statement=waf.CfnWebACL.StatementProperty(
                managed_rule_group_statement=waf.CfnWebACL.ManagedRuleGroupStatementProperty(
                    name="AWSManagedRulesLinuxRuleSet",
                    vendor_name="AWS",
                    excluded_rules=[],
                )
            ),
            visibility_config=waf.CfnWebACL.VisibilityConfigProperty(
                cloud_watch_metrics_enabled=True,
                metric_name="aws_linux",
                sampled_requests_enabled=True,
            ),
        )
        waf_rules.append(aws_linux_rule)

        """ 4. Bad Input Rule """
        """ Contains rules that block request patterns associated with exploitation of vulnerabilities specific to Linux, including LFI attacks.
        This can help prevent attacks that expose file contents or execute code for which the attacker should not have had access """
        aws_bad_input_rule = waf.CfnWebACL.RuleProperty(
            name="WafBadInputRule",
            priority=4,
            override_action=waf.CfnWebACL.OverrideActionProperty(count={}),
            statement=waf.CfnWebACL.StatementProperty(
                managed_rule_group_statement=waf.CfnWebACL.ManagedRuleGroupStatementProperty(
                    name="AWSManagedRulesKnownBadInputsRuleSet",
                    vendor_name="AWS",
                    excluded_rules=[],
                )
            ),
            visibility_config=waf.CfnWebACL.VisibilityConfigProperty(
                cloud_watch_metrics_enabled=True,
                metric_name="aws_badinput",
                sampled_requests_enabled=True,
            ),
        )
        waf_rules.append(aws_bad_input_rule)

        """ Create the Web ACL for the WAF using the managed rule sets list (waf_rules)
        in this case the Web ACL is "REGIONAL" as we are attaching it to the ALB """
        web_acl = waf.CfnWebACL(
            self,
            "WebACL",
            default_action=waf.CfnWebACL.DefaultActionProperty(allow={}),
            scope="REGIONAL",
            visibility_config=waf.CfnWebACL.VisibilityConfigProperty(
                cloud_watch_metrics_enabled=True,
                metric_name="webACL",
                sampled_requests_enabled=True,
            ),
            name=f"MoodleWAF-dev",
            rules=waf_rules,
        )

        """ Associate it with the ALB arn. """
        waf.CfnWebACLAssociation(
            self,
            "WAFACLAssociateALB",
            web_acl_arn=web_acl.attr_arn,
            resource_arn=application.load_balancer.load_balancer_arn,
        )
